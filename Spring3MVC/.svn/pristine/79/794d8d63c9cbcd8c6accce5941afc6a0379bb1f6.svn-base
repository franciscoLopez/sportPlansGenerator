package com.project.controller;

import java.util.Collection;
import java.util.List;
import java.util.SortedSet;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.project.dto.DTOSportTrainer;
import com.project.model.Customer;
import com.project.model.Profile;
import com.project.model.SportTrainer;
import com.project.model.User;
import com.project.servicios.SportTrainerManager;
import com.project.util.Vista;

@Controller
public class SportTrainerController extends GenericController {

	@Autowired
	protected SportTrainerManager sportTrainerManager;

	@RequestMapping(value = "/addSportTrainer.do", method = RequestMethod.POST)
	public ModelAndView addSportTrainer(ModelMap model,
			@ModelAttribute("sportTrainer") SportTrainer sportTrainer,
			BindingResult result, HttpSession session) {
		ModelAndView res = null;
		if (sportTrainer != null) {
			validarSportTrainer.validate(sportTrainer, result);
			if (result.hasErrors()) {
				res = new ModelAndView("redirect:/menuSportCentre.do");
			} else {
				if (sportTrainer.getPassword().equals(
						sportTrainer.getRepetirPassword())) {
					SortedSet<String> users = this.daoUser.getUsernames();
					if (!users.contains(sportTrainer.getUsername())) {
						SecurityContext securityContext = (SecurityContext) session
								.getAttribute("SPRING_SECURITY_CONTEXT");
						User usuario = null;
						if (securityContext != null) {
							usuario = this.daoUser.getUserByUserName(securityContext.getAuthentication().getName());
						}
						this.daoSportTrainer.addSportTrainer(sportTrainer,usuario.getId());
						model.addAttribute("mensaje_ok","Monitor creado correctamente");
						org.springframework.security.core.userdetails.User user = (org.springframework.security.core.userdetails.User)SecurityContextHolder.getContext().getAuthentication().getPrincipal();
						model.addAttribute("user",user);
						Long id = this.daoUser.getIdByUsername(user.getUsername());
						model.addAttribute("numSportTrainers",this.daoSportCentre.getNumberSportTrainers(id));
						model.addAttribute("numCustomers",this.daoSportCentre.getNumberCustomers(id));
						model.addAttribute("numSportPlans",this.daoSportCentre.getNumberSportPlans(id));
						res = new ModelAndView(Vista.MENU_SPORT_CENTRE,model);
						//						res = "redirect:/menuSportCentre.do";
					} else {
						result.rejectValue("username",
								"etiqueta.error.username.repetido");
						res = new ModelAndView("redirect:/menuSportCentre.do");
					}
				} else {
					result.rejectValue("repetirPassword",
							"etiqueta.error.password.incorrecto");
					res = new ModelAndView("redirect:/menuSportCentre.do");
				}
			}
		} else {
			result.rejectValue("username",
					"etiqueta.error.username.is.required");
			res = new ModelAndView("redirect:/menuSportCentre.do");
		}
		return res;
	}

	@RequestMapping(value = "/getSportTrainers.do", method = RequestMethod.GET)
	public String test(ModelMap modelo, HttpServletRequest request) {
		org.springframework.security.core.userdetails.User user = (org.springframework.security.core.userdetails.User) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		List<DTOSportTrainer> listSP = this.daoSportCentre.getSportTrainers(this.daoUser.getIdByUsername(user.getUsername()));
		modelo.addAttribute("listaSportTrainers", listSP);
		return "jsonView";
	}

	@RequestMapping(value = "/deleteSportTrainer.do", method = RequestMethod.GET)
	public String deleteSportTrainerGET(ModelMap model, HttpSession session,
			Long userId) {
		this.daoSportTrainer.deleteSportTrainer(userId);
		return "redirect:/menuSportCentre.do";
	}

	@RequestMapping(value = "/modifyInfoSportTrainer.do", method = RequestMethod.GET)
	public ModelAndView modifyInfoSportTrainerGET(ModelMap model,
			HttpSession session, Long userId,
			@ModelAttribute("sportTrainer") SportTrainer infoSportTrainer) {
		SportTrainer sportTrainer = this.daoSportTrainer.getSportTrainer(userId);
		model.addAttribute("sportTrainer", sportTrainer);
		return new ModelAndView(Vista.FORM_MODIFY_CREDENTIALS_SPORT_TRAINER);
	}

	@RequestMapping(value = "/modifySportTrainer.do", method = RequestMethod.POST)
	public String modifySportTrainerPOST(ModelMap model, HttpSession session,
			@ModelAttribute("sportTrainer") SportTrainer infoSportTrainer,
			BindingResult result) {
		String res = null;
		if (infoSportTrainer != null) {
			validarInfoSportTrainer.validate(infoSportTrainer, result);
			if (result.hasErrors()) {
				model.addAttribute("error",result);
				res = Vista.FORM_MODIFY_CREDENTIALS_SPORT_TRAINER;
			} else {
				this.daoSportTrainer.modifySportTrainer(infoSportTrainer);
				Collection<GrantedAuthority> a = SecurityContextHolder.getContext().getAuthentication().getAuthorities();
				GrantedAuthority g = a.iterator().next();
				if(g.getAuthority().equals("ROLE_SPORT_CENTRE")){
					res = "redirect:/menuSportCentre.do";
				}
				else if(g.getAuthority().equals("ROLE_SPORT_TRAINER")){
					res = "redirect:/menuSportTrainer.do";
				}				
			}
		} else {
			result.rejectValue("name", "etiqueta.error.username.is.required");
			model.addAttribute("error",result);
			res = Vista.FORM_MODIFY_CREDENTIALS_SPORT_TRAINER;
		}
		return res;
	}
	
	@RequestMapping(value = "/generarPlan.do", method = RequestMethod.GET)
	public String generarPlanGET(ModelMap model,HttpSession session, Long userId) {
		String res = null;
		Customer customer = this.daoCustomer.getCustomer(userId);
		model.addAttribute("customer",customer);
		if(customer.getProfile() == null){	
			res = "redirect:modifyProfile.do"; 
		}else{
			res = "redirect:menuGenerarPlan.do";
		}
		return res;
	}
	
	@RequestMapping(value = "/modifyProfile.do", method = RequestMethod.GET)
	public ModelAndView modifyProfileGET(ModelMap model,HttpSession session, Long userId,@ModelAttribute("profile") Profile profile,BindingResult result) {
		List<String> customerLevels = this.daoComun.getCustomerLevels();
		model.addAttribute("customerLevels",customerLevels);
		return new ModelAndView(Vista.FORM_MODIFY_PROFILE,model);
	}
	
	@RequestMapping(value = "/menuGenerarPlan.do", method = RequestMethod.GET)
	public ModelAndView menuGenerarPlanGET(ModelMap model,HttpSession session, Long userId) {
		return new ModelAndView(Vista.MENU_GENERATOR);
	}
}