package com.project.dao.impl;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import org.hibernate.Criteria;
import org.hibernate.SessionFactory;
import org.hibernate.criterion.Restrictions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.project.dao.DAOCustomer;
import com.project.dao.DAOMuscle;
import com.project.dao.DAOSportPlan;
import com.project.dao.DAOSportTrainer;
import com.project.dto.DTOSportPlan;
import com.project.model.Customer;
import com.project.model.CustomerLevel;
import com.project.model.DayOfWeek;
import com.project.model.Duration;
import com.project.model.Equipment;
import com.project.model.Objetive;
import com.project.model.Orden;
import com.project.model.Period;
import com.project.model.PhysicalQuality;
import com.project.model.Plan;
import com.project.model.RoutineParams;
import com.project.model.RoutineType;
import com.project.model.Session;
import com.project.model.SportPlan;
import com.project.model.SportTrainer;
import com.project.model.Week;
import com.project.servicios.SportPlanCreator;

@Transactional
public class DAOSportPlanImpl extends SportPlanCreator implements DAOSportPlan {

	@Autowired
	protected DAOSportTrainer daoSportTrainer;
	
	@Autowired
	protected DAOCustomer daoCustomer;
	
	@Autowired
	protected DAOMuscle daoMuscle;
	
	@Autowired
	protected SessionFactory	sessionFactory;
	
	// Niveles
	private final  String aclimatacion = remove1(CustomerLevel.C_L_ACLIMATACION);
	private final  String principiante = remove1(CustomerLevel.C_L_PRINCIPIANTE);
	private final  String intermedio = remove1(CustomerLevel.C_L_INTERMEDIO);
	private final  String avanzado = remove1(CustomerLevel.C_L_AVANZADO);
	
	// Tipos de entrenamiento
	private final   String mantenimiento = remove1(Objetive.O_MANTENIMIENTO);
	private final   String ppeso = remove1(Objetive.O_PERDIDA_PESO);
	private final   String adaptacion = remove1(Objetive.O_ADAPTACION);
	private final   String hipertrofia = remove1(Objetive.O_HIPERTROFIA);
	private final   String salud = remove1(Objetive.O_SALUD);
	private final   String aFuerza = remove1(Objetive.O_AUMENTO_DE_LA_FUERZA);
	
	
	public Long createSportPlanStepOne(DTOSportPlan dtoSportPlan) {
		SportPlan sp = new SportPlan();
		SportTrainer sTrainer = this.daoSportTrainer.getSportTrainer(dtoSportPlan.getSportTrainerId());
		sp.setSportTrainer(sTrainer);
		
		Customer cus = this.daoCustomer.getCustomer(dtoSportPlan.getCustomerId());
		sp.setCustomer(cus);
		
		CustomerLevel cl = this.daoMuscle.getCustomerLevel(dtoSportPlan.getLevel());
		sp.setLevel(cl);
		
		Objetive obj = this.daoMuscle.getObjetive(dtoSportPlan.getObjetive());
		sp.setObjetive(obj);
		
		PhysicalQuality pq = this.daoMuscle.getPhysicalQuality(dtoSportPlan.getPhysicalQuality());
		sp.setPhysicalQuality(pq);
		
		Duration d = new Duration();
		d.setPeriods(dtoSportPlan.getPeriods());
		d.setWeeks(dtoSportPlan.getWeeks());
		d.setSessionsPerWeek(dtoSportPlan.getSessionsPerWeek());
		d.setRecuperationTime(dtoSportPlan.getRecuperationTime());
		d.setRecuperationTimeMuscularGroup(dtoSportPlan.getRecuperationTimeMuscleGroup());
		List<DayOfWeek> days = this.daoMuscle.getDaysOfWeek(dtoSportPlan.getDaysOfWeek());
		d.setDays(days);
		sessionFactory.getCurrentSession().saveOrUpdate(d);
		sp.setDuration(d);
		
		Calendar hoy = Calendar.getInstance();
		sp.setInsertDate(hoy.getTime());
		sp.setModifyDate(hoy.getTime());
		
		// Aun no hemos creado el SportPlan por completo
		sp.setDefined(false);
		
		sessionFactory.getCurrentSession().saveOrUpdate(sp);
		return sp.getId();
		
	}

	/**
	 * FunciÛn que elimina acentos y caracteres especiales de
	 * una cadena de texto.
	 * @param input
	 * @return cadena de texto limpia de acentos y caracteres especiales.
	 */
	private static String remove1(String input) {
	    // Cadena de caracteres original a sustituir.
	    String original = "·‡‰ÈËÎÌÏÔÛÚˆ˙˘uÒ¡¿ƒ…»ÀÕÃœ”“÷⁄Ÿ‹—Á«";
	    // Cadena de caracteres ASCII que reemplazar·n los originales.
	    String ascii = "aaaeeeiiiooouuunAAAEEEIIIOOOUUUNcC";
	    String output = input;
	    for (int i=0; i<original.length(); i++) {
	        // Reemplazamos los caracteres especiales.
	        output = output.replace(original.charAt(i), ascii.charAt(i));
	    }//for i
	    return output;
	}
	
	private static String changeLevel(String level){
		String res ="";
		if(level.startsWith("Aclimat")){
			res = "Aclimatacion";
		}else if(level.startsWith("Princip")){
			res = "Principiante";
		}else if(level.startsWith("Intermedio")){
			res = "Intermedio";
		}else if(level.startsWith("Avanzado")){
			res = "Avanzado";
		}
		return res;
	}
	private static String changeObjetive(String objetive){
		String res = "";
		if(objetive.startsWith("Adaptac")){
			res = "Adaptacion";
		}else if(objetive.startsWith("Aumento de la fuerza")){
			res = "Aumento de la fuerza";
		}else if(objetive.startsWith("Hipertrofia")){
			res = "Hipertrofia";
		}else if(objetive.startsWith("Mantenimiento")){
			res = "Mantenimiento";
		}else if(objetive.endsWith("peso")){
			res = "Perdida de peso";
		}else if(objetive.startsWith("Salud")){
			res = "Salud";
		}
		return res;
	}
	
	
	
	public Integer getSessionsPerWeek(String level, String objetive) {
		String nivel = changeLevel(level);
		String objetivo = changeObjetive(objetive);
		Integer res = 0;
		if(nivel.equals(aclimatacion)){
			if(objetivo.equals(mantenimiento)){
				res = 1;
			}else{
				res = 2;
			}
		}else if (nivel.equals(principiante)){
			if(objetivo.equals(mantenimiento) || objetivo.equals(ppeso)){
				res = 2;
			}else{
				res = 3;
			}
		}else if (nivel.equals(intermedio) || nivel.equals(avanzado)){
			if(objetivo.equals(mantenimiento)){
				res = 2;
			}else if (objetivo.equals(ppeso)){
				res = 3;
			}else{
				res = 6;
			}
		}
		return res;
	}
	/*
	 * @param 
	 * muscleGrop if true represents the recuperation time for the same muscular group
	 * */
	public Integer getRecuperationTime(String level, String objetive){
		String nivel = changeLevel(level);
		String objetivo = changeObjetive(objetive);
		Integer res = 48;
		if(nivel.equals(intermedio) || nivel.equals(avanzado)){
			if(objetivo.equals(hipertrofia) || objetivo.equals(salud) || objetivo.equals(aFuerza)){
				res = -1;
			}
		}
		return res;
	}

	public List<Orden> getRoutineOrders() {
		Criteria crit = sessionFactory.getCurrentSession().createCriteria(Orden.class);
		List<Orden> res = crit.list();
		return res;
	}

	public List<RoutineType> getRoutineTypes() {
		Criteria crit = sessionFactory.getCurrentSession().createCriteria(RoutineType.class);
		List<RoutineType> res = crit.list();
		return res;
	}
	
	// Es necesario conocer el tipo de rutina para saber el orden
	public Integer[] getExercisesPerSession(String level, String objetive,String routineType){
		Integer exercises [] = new Integer[2];
		String nivel = changeLevel(level);
		String objetivo = changeObjetive(objetive);
		if(nivel.equals(aclimatacion)){
			exercises[0] = 6;
			exercises[1] = 8;
		}else if(nivel.equals(principiante)){
			exercises[0] = 8;
			exercises[1] = 12;
		}else if(nivel.equals(intermedio)){
			if(routineType.equals(RoutineType.R_TYPE_POR_GRUPO_MUSCULAR)){
				exercises[0] = 6;
				exercises[1] = 9;
			}else{
				exercises[0] = 8;
				exercises[1] = 12;
			}			
		}else if(nivel.equals(avanzado)){
			if(routineType.equals(RoutineType.R_TYPE_POR_GRUPO_MUSCULAR)){
				exercises[0] = 9;
				exercises[1] = 12;
			}else{
				exercises[0] = 8;
				exercises[1] = 12;
			}
		}
		return exercises;
	}

	public Long createSportPlanStepTwo(DTOSportPlan dtoSportPlan) {
		SportPlan sp = this.getSportPlan(dtoSportPlan.getSportPlanId());
		
		RoutineParams rp = new RoutineParams();
		
		Orden orden = this.getRoutineOrder(dtoSportPlan.getRoutineOrder());
		rp.setRoutineOrder(orden);
		
		RoutineType rt = this.getRoutineType(dtoSportPlan.getRoutineType());
		rp.setRoutineType(rt);
		
		rp.setExercisesPerSession(dtoSportPlan.getExercisesPerSession());
		
		sessionFactory.getCurrentSession().saveOrUpdate(rp);
		
		sp.setRoutineParams(rp);
		
		sp.setEquipmentFilter(this.getEquipments(dtoSportPlan.getEquipmentFilter()));
		
		this.createSportPlan(sp);
		
		sessionFactory.getCurrentSession().persist(sp);
		
//		sessionFactory.getCurrentSession().saveOrUpdate(sp);
		return sp.getId();
	}

	public SportPlan getSportPlan(Long sportPlanId) {
		Criteria crit = sessionFactory.getCurrentSession().createCriteria(SportPlan.class);
		crit.add(Restrictions.idEq(sportPlanId));
		return (SportPlan) crit.uniqueResult();
	}

	public Orden getRoutineOrder(String order) {
		Criteria crit = sessionFactory.getCurrentSession().createCriteria(Orden.class);
		crit.add(Restrictions.eq("routineOrder", order));
		return (Orden) crit.uniqueResult();
	}

	public RoutineType getRoutineType(String type) {
		Criteria crit = sessionFactory.getCurrentSession().createCriteria(RoutineType.class);
		crit.add(Restrictions.eq(RoutineType.RT_TYPE, type));
		return (RoutineType) crit.uniqueResult();
	}
	
	public List<Equipment> getEquipments() {
		Criteria crit = sessionFactory.getCurrentSession().createCriteria(Equipment.class);
		return crit.list();
	}

	public List<Equipment> getEquipments(List<String> equipments) {
		List<Equipment> res = new ArrayList<Equipment>();
		for(String equipment : equipments){
			Criteria crit = sessionFactory.getCurrentSession().createCriteria(Equipment.class);
			crit.add(Restrictions.eq(Equipment.A_EQUIPMENT, equipment));
			Equipment e = (Equipment) crit.uniqueResult();
			res.add(e);
		}
		return res;
	}

	public List<Equipment> getEquipments(String level) {
		String nivel = changeLevel(level);
		List<Equipment> res = new ArrayList<Equipment>();
		Criteria crit = sessionFactory.getCurrentSession().createCriteria(Equipment.class);
		crit.add(Restrictions.eq(Equipment.A_EQUIPMENT, Equipment.E_MAQUINAS));
		Equipment maquinas = (Equipment) crit.uniqueResult();
		if(nivel.equals(aclimatacion) || nivel.equals(principiante)){
			res.add(maquinas);
		}else{
			res = this.getEquipments();
		}
		return res;
	}

	public SportPlan createSportPlanStructure(SportPlan sportPlan) {
		Plan plan = new Plan();
		sportPlan.setPlan(plan);
		sessionFactory.getCurrentSession().save(plan);
		
		// N∫ periodos
		Integer periods = sportPlan.getDuration().getPeriods();
		// N∫ semanas
		Integer weeks = sportPlan.getDuration().getWeeks();		
		// Dias de la semana
//		List<DayOfWeek> days = sportPlan.getDuration().getDays();
		List<DayOfWeek> days = new ArrayList<DayOfWeek>();
		for(DayOfWeek d : sportPlan.getDuration().getDays()){
			DayOfWeek day = (DayOfWeek) sessionFactory.getCurrentSession().createCriteria(DayOfWeek.class).add(Restrictions.eq(DayOfWeek.DAY, d.getDay())).uniqueResult();
			days.add(day);
		}
		
		List<Period> periodsList = new ArrayList<Period>();
		for(int i = 0 ; i < periods; i++){
			Period p = new Period();
			// Incluimos las semanas a cada periodo			
			List<Week> weeksList = new ArrayList<Week>();
			for(int j = 0 ; j < weeks; j ++){
				Week w = new Week();							
				// Incluimos los dias a cada semana
				List<Session> sessionsList = new ArrayList<Session>();
				for(int k = 0 ; k < days.size(); k++){
					Session s = new Session();					
					s.setDayOfWeek(days.get(k));
					sessionsList.add(s);
					sessionFactory.getCurrentSession().save(s);
				}
				w.setSessions(sessionsList);
				
				weeksList.add(w);
				sessionFactory.getCurrentSession().saveOrUpdate(w);
			}
			
			p.setWeeks(weeksList);			
	
			periodsList.add(p);
			sessionFactory.getCurrentSession().saveOrUpdate(p);
		}
		plan.setPeriods(periodsList);
		sessionFactory.getCurrentSession().saveOrUpdate(plan);
		
		return sportPlan;
	}

	
	public SportPlan definePeriodization(SportPlan sportPlan) {
		// TODO Auto-generated method stub
		return null;
	}

	
	public SportPlan defineExercisesType(SportPlan sportPlan) {
		// TODO Auto-generated method stub
		return null;
	}

	
	public SportPlan defineSpeedExecution(SportPlan sportPlan) {
		// TODO Auto-generated method stub
		return null;
	}

	
	public SportPlan defineIntensity(SportPlan sportPlan) {
		// TODO Auto-generated method stub
		return null;
	}

	
	public SportPlan defineRestTime(SportPlan sportPlan) {
		// TODO Auto-generated method stub
		return null;
	}

	
	public SportPlan defineNumOfSeries(SportPlan sportPlan) {
		// TODO Auto-generated method stub
		return null;
	}
}